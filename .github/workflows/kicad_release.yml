name: KiCad CI · ERC/DRC · Fabrication · Release

on:
  push:
    branches: [ main, master ]   # ajusta si usas otra rama
    tags:     [ "v*", "release-*", "*" ]  # si haces push con tag, lo toma como release formal

permissions:
  contents: write   # necesario para crear/actualizar releases y subir assets
jobs:
  kicad:
    name: Validate · Build · Release
    runs-on: ubuntu-latest
    # Usamos el contenedor oficial que trae kicad-cli
    container: kicad/kicad:9.0

    env:
      PROJECT_NAME: "kuska-lte"
      SCH_FILE: "${{ env.PROJECT_NAME }}.kicad_sch"
      PCB_FILE: "${{ env.PROJECT_NAME }}.kicad_pcb"
      OUT_DIR:  "${{ github.workspace }}/out"
      REPORTS_DIR: "${{ github.workspace }}/reports"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Compute tag / prerelease flag
        id: meta
        shell: bash
        run: |
          if [ "${GITHUB_REF_TYPE}" = "tag" ]; then
            echo "tag=${GITHUB_REF_NAME}" >> "$GITHUB_OUTPUT"
            echo "prerelease=false"       >> "$GITHUB_OUTPUT"
          else
            echo "tag=build-${GITHUB_SHA::8}" >> "$GITHUB_OUTPUT"
            echo "prerelease=true"            >> "$GITHUB_OUTPUT"
          fi
          echo "TAG=$(cat $GITHUB_OUTPUT | sed -n 's/^tag=//p')"

      - name: Prepare dirs
        run: |
          mkdir -p "$OUT_DIR" "$REPORTS_DIR"
          mkdir -p "$OUT_DIR/gerbers" "$OUT_DIR/drill" "$OUT_DIR/pos" "$OUT_DIR/bom" "$OUT_DIR/docs"

      # ---------- VALIDATE ----------
      - name: ERC (schematic)
        run: |
          set -euxo pipefail
          kicad-cli sch erc --severity-all --exit-code-violations \
            -o "${REPORTS_DIR}/erc.rpt" "${SCH_FILE}"

      - name: DRC (pcb)
        run: |
          set -euxo pipefail
          kicad-cli pcb drc --severity-all --exit-code-violations \
            -o "${REPORTS_DIR}/drc.rpt" "${PCB_FILE}"

      - name: Upload validation reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: kicad-reports-${{ steps.meta.outputs.tag }}
          path: reports/

      # ---------- FABRICATION (solo si pasó ERC/DRC) ----------
      - name: Exports (Gerbers / Drill / POS / BOM / PDF)
        run: |
          set -euxo pipefail
          # Gerbers + Drill
          kicad-cli pcb export gerbers --output "${OUT_DIR}/gerbers" "${PCB_FILE}"
          kicad-cli pcb export drill   --format excellon --output "${OUT_DIR}/drill" "${PCB_FILE}"
          # Pick&Place
          kicad-cli pcb export pos --output "${OUT_DIR}/pos/${PROJECT_NAME}.pos" --units mm --format csv "${PCB_FILE}"
          # BOM con etiqueta del release
          SAFE_TAG="$(printf '%s' "${{ steps.meta.outputs.tag }}" | sed 's/[^A-Za-z0-9._-]/_/g')"
          kicad-cli sch export bom --output "${OUT_DIR}/bom/${PROJECT_NAME}_bom_${SAFE_TAG}.csv" \
            --fields "Reference,Value,Footprint,Datasheet" "${SCH_FILE}"
          # PDFs
          kicad-cli sch export pdf --output "${OUT_DIR}/docs/${PROJECT_NAME}_schematic.pdf" "${SCH_FILE}"
          kicad-cli pcb export pdf --output "${OUT_DIR}/docs/${PROJECT_NAME}_pcb.pdf" "${PCB_FILE}"
          # Paquete .tar.gz en la raíz del workspace
          TAR="${PROJECT_NAME}_fab_${{ steps.meta.outputs.tag }}.tar.gz"
          tar -czf "$TAR" -C "$OUT_DIR" .
          echo "TAR=$TAR" >> $GITHUB_ENV
          ls -lah "$TAR"

      - name: Upload build artifact (.tar.gz)
        uses: actions/upload-artifact@v4
        with:
          name: fabrication-tar-${{ steps.meta.outputs.tag }}
          path: ${{ env.TAR }}
          if-no-files-found: error

      # ---------- RELEASE ----------
      - name: Create/Update GitHub Release and upload asset
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.meta.outputs.tag }}
          name:     ${{ env.PROJECT_NAME }} ${{ steps.meta.outputs.tag }}
          prerelease: ${{ steps.meta.outputs.prerelease }}
          files: ${{ env.TAR }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
